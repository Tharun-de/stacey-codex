const supabase = require('./supabaseClient');

/**
 * Get all orders
 * @returns {Promise<Array>} All orders
 */
async function getAllOrders() {
  if (!supabase) throw new Error('Supabase client not initialized');
  try {
    const { data, error } = await supabase
      .from('orders')
      .select('*')
      .order('created_at', { ascending: false }); // Optional: order by creation date

    if (error) throw error;
    return data || []; // Return data or empty array if null
  } catch (error) {
    console.error('[Supabase] Error getting all orders:', error);
    throw error;
  }
}

/**
 * Get order by ID
 * @param {string} id - Order ID (UUID from Supabase)
 * @returns {Promise<Object|null>} Order object or null if not found
 */
async function getOrderById(id) {
  if (!supabase) throw new Error('Supabase client not initialized');
  try {
    const { data, error } = await supabase
      .from('orders')
      .select('*')
      .eq('id', id)
      .single(); // Use .single() if ID is a unique primary key

    if (error) {
      // If error is because no rows found, .single() makes it an error. We can treat it as not found.
      if (error.code === 'PGRST116') { // PGRST116: "The result contains 0 rows"
        return null;
      }
      throw error;
    }
    return data;
  } catch (error) {
    console.error(`[Supabase] Error getting order with ID ${id}:`, error);
    throw error;
  }
}

/**
 * Create a new order
 * @param {Object} orderDetails - Order details from the frontend (customer, items, pickup, total, orderStatus, specialInstructions)
 * @returns {Promise<Object>} Created order
 */
async function createOrder(orderDetails) {
  if (!supabase) throw new Error('Supabase client not initialized');
  try {
    // Note: Supabase handles 'id' (as UUID) and 'created_at' automatically.
    // 'updated_at' is also handled by the trigger we set up.
    // We need to map frontend orderDetails to the database schema.

    const orderToInsert = {
      customer: orderDetails.customer,       // Should be a JSON object
      items: orderDetails.items,             // Should be an array of JSON objects
      pickup: orderDetails.pickup,           // Should be a JSON object { date, time }
      total: orderDetails.total,
      status: orderDetails.orderStatus || orderDetails.status || 'pending',
      special_instructions: orderDetails.specialInstructions
      // created_at and updated_at will be set by Supabase defaults/triggers
      // id will be generated by Supabase as a UUID
    };

    const { data, error } = await supabase
      .from('orders')
      .insert([orderToInsert])
      .select() // select() is important to return the inserted row(s)
      .single(); // Assuming we insert one and want that one back

    if (error) throw error;
    return data; 
  } catch (error) {
    console.error('[Supabase] Error creating order:', error);
    throw error;
  }
}

/**
 * Update order status
 * @param {string} id - Order ID (UUID from Supabase)
 * @param {string} status - New status
 * @returns {Promise<Object|null>} Updated order or null if not found
 */
async function updateOrderStatus(id, status) {
  if (!supabase) throw new Error('Supabase client not initialized');
  try {
    const { data, error } = await supabase
      .from('orders')
      .update({ status: status /*, updated_at will be handled by trigger */ })
      .eq('id', id)
      .select()
      .single();

    if (error) {
        // If error is because no rows found to update (match condition failed)
        if (error.code === 'PGRST116') { 
            return null; // Treat as not found
        }
        throw error;
    }
    return data;
  } catch (error) {
    console.error(`[Supabase] Error updating status for order ${id}:`, error);
    throw error;
  }
}

/**
 * Delete order by ID
 * @param {string} id - Order ID (UUID from Supabase)
 * @returns {Promise<boolean>} True if deleted, false if not found or error
 */
async function deleteOrderById(id) {
  if (!supabase) throw new Error('Supabase client not initialized');
  try {
    const { error, count } = await supabase
      .from('orders')
      .delete({ count: 'exact' })
      .eq('id', id);

    if (error) {
      console.error(`[Supabase] Error deleting order with ID ${id}:`, error);
      throw error;
    }
    
    if (count === 1) {
      return true; // Successfully deleted one row
    } else if (count === 0) {
      return false; // Order not found to delete
    } else {
      console.warn(`[Supabase] Unusual count (${count}) after delete for order ID ${id}`);
      return false; 
    }

  } catch (error) { 
    console.error(`[Supabase] Error deleting order with ID ${id}:`, error);
    throw error; 
  }
}

module.exports = {
  getAllOrders,
  getOrderById,
  createOrder,
  updateOrderStatus,
  deleteOrderById
}; 